//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\VSProjects\_iro\iro4cli\Grammar\iro.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace iro4cli.Grammar {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class iroParser : Parser {
	public const int
		INCLUDE=1, REG_EQUALS_SYM=2, EQUALS_SYM=3, ARRAY_SYM=4, COMMA_SYM=5, L_SQUARE_BRACKET=6, 
		R_SQUARE_BRACKET=7, SET_OPEN=8, SET_CLOSE=9, L_BRACKET=10, R_BRACKET=11, 
		COLON_SYM=12, SEMICOLON_SYM=13, QUOTE_SYM=14, REF_SYM=15, IDENTIFIER=16, 
		COMMENT=17, WS=18, UNKNOWN_SYMBOL=19;
	public const int
		RULE_compileUnit = 0, RULE_statement = 1, RULE_attribute = 2, RULE_sys_set = 3, 
		RULE_set = 4, RULE_include = 5, RULE_definition = 6, RULE_array = 7, RULE_regex = 8, 
		RULE_constant_ref = 9;
	public static readonly string[] ruleNames = {
		"compileUnit", "statement", "attribute", "sys_set", "set", "include", 
		"definition", "array", "regex", "constant_ref"
	};

	private static readonly string[] _LiteralNames = {
		null, "'include'", "'\\='", "'='", "'[]'", "','", "'['", "']'", "'{'", 
		"'}'", "'('", "')'", "':'", "';'", "'\"'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INCLUDE", "REG_EQUALS_SYM", "EQUALS_SYM", "ARRAY_SYM", "COMMA_SYM", 
		"L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "SET_OPEN", "SET_CLOSE", "L_BRACKET", 
		"R_BRACKET", "COLON_SYM", "SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "IDENTIFIER", 
		"COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "iro.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public iroParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(iroParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Sys_setContext[] sys_set() {
			return GetRuleContexts<Sys_setContext>();
		}
		public Sys_setContext sys_set(int i) {
			return GetRuleContext<Sys_setContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 22;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
				case 1:
					{
					State = 20; statement();
					}
					break;

				case 2:
					{
					State = 21; sys_set();
					}
					break;
				}
				}
				State = 26;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 27; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 29; attribute();
				}
				break;

			case 2:
				{
				State = 30; set();
				}
				break;

			case 3:
				{
				State = 31; include();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(IDENTIFIER);
			State = 35; definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sys_setContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Sys_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sys_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterSys_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitSys_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSys_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sys_setContext sys_set() {
		Sys_setContext _localctx = new Sys_setContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_sys_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(IDENTIFIER);
			State = 39;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 38; Match(ARRAY_SYM);
				}
			}

			State = 41; Match(SET_OPEN);
			State = 45;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 42; statement();
				}
				}
				State = 47;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 48; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public ITerminalNode COLON_SYM() { return GetToken(iroParser.COLON_SYM, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(iroParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(iroParser.IDENTIFIER, i);
		}
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 50; Match(IDENTIFIER);
				}
			}

			State = 54;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 53; Match(ARRAY_SYM);
				}
			}

			State = 56; Match(COLON_SYM);
			State = 57; Match(IDENTIFIER);
			State = 58; Match(SET_OPEN);
			State = 62;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 59; statement();
				}
				}
				State = 64;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 65; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public ITerminalNode COLON_SYM() { return GetToken(iroParser.COLON_SYM, 0); }
		public ITerminalNode INCLUDE() { return GetToken(iroParser.INCLUDE, 0); }
		public ITerminalNode[] QUOTE_SYM() { return GetTokens(iroParser.QUOTE_SYM); }
		public ITerminalNode QUOTE_SYM(int i) {
			return GetToken(iroParser.QUOTE_SYM, i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(COLON_SYM);
			State = 68; Match(INCLUDE);
			State = 69; Match(QUOTE_SYM);
			State = 70; Match(IDENTIFIER);
			State = 71; Match(QUOTE_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public ITerminalNode EQUALS_SYM() { return GetToken(iroParser.EQUALS_SYM, 0); }
		public ITerminalNode REG_EQUALS_SYM() { return GetToken(iroParser.REG_EQUALS_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public RegexContext regex() {
			return GetRuleContext<RegexContext>(0);
		}
		public Constant_refContext constant_ref() {
			return GetRuleContext<Constant_refContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public ITerminalNode SEMICOLON_SYM() { return GetToken(iroParser.SEMICOLON_SYM, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 73; Match(ARRAY_SYM);
				}
			}

			State = 76;
			_la = _input.La(1);
			if ( !(_la==REG_EQUALS_SYM || _la==EQUALS_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 81;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 77; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 78; regex();
				}
				break;

			case 3:
				{
				State = 79; constant_ref();
				}
				break;

			case 4:
				{
				State = 80; array();
				}
				break;
			}
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON_SYM) {
				{
				State = 83; Match(SEMICOLON_SYM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(iroParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(iroParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA_SYM() { return GetTokens(iroParser.COMMA_SYM); }
		public ITerminalNode COMMA_SYM(int i) {
			return GetToken(iroParser.COMMA_SYM, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_array);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 86; Match(IDENTIFIER);
					State = 87; Match(COMMA_SYM);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 90;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 92; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(iroParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(iroParser.R_BRACKET, 0); }
		public RegexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterRegex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitRegex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexContext regex() {
		RegexContext _localctx = new RegexContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_regex);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 94; Match(L_BRACKET);
			State = 98;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 95;
					MatchWildcard();
					}
					} 
				}
				State = 100;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			State = 101; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_refContext : ParserRuleContext {
		public ITerminalNode[] REF_SYM() { return GetTokens(iroParser.REF_SYM); }
		public ITerminalNode REF_SYM(int i) {
			return GetToken(iroParser.REF_SYM, i);
		}
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public Constant_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterConstant_ref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitConstant_ref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_refContext constant_ref() {
		Constant_refContext _localctx = new Constant_refContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_constant_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(REF_SYM);
			State = 104; Match(REF_SYM);
			State = 105; Match(SET_OPEN);
			State = 106; Match(IDENTIFIER);
			State = 107; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x15p\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x3\x2\x3\x2\a\x2\x19\n\x2\f\x2\xE\x2\x1C\v\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3#\n\x3\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5"+
		"\x5\x5*\n\x5\x3\x5\x3\x5\a\x5.\n\x5\f\x5\xE\x5\x31\v\x5\x3\x5\x3\x5\x3"+
		"\x6\x5\x6\x36\n\x6\x3\x6\x5\x6\x39\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6?"+
		"\n\x6\f\x6\xE\x6\x42\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\b\x5\bM\n\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bT\n\b\x3\b\x5\bW\n\b\x3\t\x3"+
		"\t\x6\t[\n\t\r\t\xE\t\\\x3\t\x3\t\x3\n\x3\n\a\n\x63\n\n\f\n\xE\n\x66\v"+
		"\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\x64\x2\x2\f\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x2\x3\x3\x2\x4\x5"+
		"u\x2\x1A\x3\x2\x2\x2\x4\"\x3\x2\x2\x2\x6$\x3\x2\x2\x2\b\'\x3\x2\x2\x2"+
		"\n\x35\x3\x2\x2\x2\f\x45\x3\x2\x2\x2\xEL\x3\x2\x2\x2\x10Z\x3\x2\x2\x2"+
		"\x12`\x3\x2\x2\x2\x14i\x3\x2\x2\x2\x16\x19\x5\x4\x3\x2\x17\x19\x5\b\x5"+
		"\x2\x18\x16\x3\x2\x2\x2\x18\x17\x3\x2\x2\x2\x19\x1C\x3\x2\x2\x2\x1A\x18"+
		"\x3\x2\x2\x2\x1A\x1B\x3\x2\x2\x2\x1B\x1D\x3\x2\x2\x2\x1C\x1A\x3\x2\x2"+
		"\x2\x1D\x1E\a\x2\x2\x3\x1E\x3\x3\x2\x2\x2\x1F#\x5\x6\x4\x2 #\x5\n\x6\x2"+
		"!#\x5\f\a\x2\"\x1F\x3\x2\x2\x2\" \x3\x2\x2\x2\"!\x3\x2\x2\x2#\x5\x3\x2"+
		"\x2\x2$%\a\x12\x2\x2%&\x5\xE\b\x2&\a\x3\x2\x2\x2\')\a\x12\x2\x2(*\a\x6"+
		"\x2\x2)(\x3\x2\x2\x2)*\x3\x2\x2\x2*+\x3\x2\x2\x2+/\a\n\x2\x2,.\x5\x4\x3"+
		"\x2-,\x3\x2\x2\x2.\x31\x3\x2\x2\x2/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30"+
		"\x32\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x32\x33\a\v\x2\x2\x33\t\x3\x2\x2\x2"+
		"\x34\x36\a\x12\x2\x2\x35\x34\x3\x2\x2\x2\x35\x36\x3\x2\x2\x2\x36\x38\x3"+
		"\x2\x2\x2\x37\x39\a\x6\x2\x2\x38\x37\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39"+
		":\x3\x2\x2\x2:;\a\xE\x2\x2;<\a\x12\x2\x2<@\a\n\x2\x2=?\x5\x4\x3\x2>=\x3"+
		"\x2\x2\x2?\x42\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\x43\x3\x2"+
		"\x2\x2\x42@\x3\x2\x2\x2\x43\x44\a\v\x2\x2\x44\v\x3\x2\x2\x2\x45\x46\a"+
		"\xE\x2\x2\x46G\a\x3\x2\x2GH\a\x10\x2\x2HI\a\x12\x2\x2IJ\a\x10\x2\x2J\r"+
		"\x3\x2\x2\x2KM\a\x6\x2\x2LK\x3\x2\x2\x2LM\x3\x2\x2\x2MN\x3\x2\x2\x2NS"+
		"\t\x2\x2\x2OT\a\x12\x2\x2PT\x5\x12\n\x2QT\x5\x14\v\x2RT\x5\x10\t\x2SO"+
		"\x3\x2\x2\x2SP\x3\x2\x2\x2SQ\x3\x2\x2\x2SR\x3\x2\x2\x2TV\x3\x2\x2\x2U"+
		"W\a\xF\x2\x2VU\x3\x2\x2\x2VW\x3\x2\x2\x2W\xF\x3\x2\x2\x2XY\a\x12\x2\x2"+
		"Y[\a\a\x2\x2ZX\x3\x2\x2\x2[\\\x3\x2\x2\x2\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2"+
		"]^\x3\x2\x2\x2^_\a\x12\x2\x2_\x11\x3\x2\x2\x2`\x64\a\f\x2\x2\x61\x63\v"+
		"\x2\x2\x2\x62\x61\x3\x2\x2\x2\x63\x66\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2"+
		"\x64\x62\x3\x2\x2\x2\x65g\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2gh\a\r\x2\x2"+
		"h\x13\x3\x2\x2\x2ij\a\x11\x2\x2jk\a\x11\x2\x2kl\a\n\x2\x2lm\a\x12\x2\x2"+
		"mn\a\v\x2\x2n\x15\x3\x2\x2\x2\xF\x18\x1A\")/\x35\x38@LSV\\\x64";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace iro4cli.Grammar
