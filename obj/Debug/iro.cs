//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Larry\Files\Programming\iro4cli\Grammar\iro.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace iro4cli.Grammar {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class iro : Parser {
	public const int
		IDENTIFIER=1, ARRAY_SYM=2, SET_OPEN=3, SET_CLOSE=4, COLON_SYM=5, INCLUDE=6, 
		QUOTE_SYM=7, SEMICOLON_SYM=8, EQUALS_SYM=9, REG_EQUALS_SYM=10, COMMA_SYM=11, 
		REGEX=12, REF_SYM=13;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_attribute = 3, 
		RULE_sys_set = 4, RULE_set = 5, RULE_typed_set = 6, RULE_include = 7, 
		RULE_definition = 8, RULE_array = 9, RULE_regex = 10, RULE_constant_ref = 11;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "attribute", "sys_set", "set", "typed_set", 
		"include", "definition", "array", "regex", "constant_ref"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "IDENTIFIER", "ARRAY_SYM", "SET_OPEN", "SET_CLOSE", "COLON_SYM", 
		"INCLUDE", "QUOTE_SYM", "SEMICOLON_SYM", "EQUALS_SYM", "REG_EQUALS_SYM", 
		"COMMA_SYM", "REGEX", "REF_SYM"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "iro.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public iro(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(iro.Eof, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << ARRAY_SYM) | (1L << COLON_SYM))) != 0)) {
				{
				{
				State = 24; block();
				}
				}
				State = 29;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 30; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Sys_setContext sys_set() {
			return GetRuleContext<Sys_setContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 32; statement();
				}
				break;

			case 2:
				{
				State = 33; sys_set();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 36; attribute();
				}
				break;

			case 2:
				{
				State = 37; set();
				}
				break;

			case 3:
				{
				State = 38; include();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iro.IDENTIFIER, 0); }
		public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41; Match(IDENTIFIER);
			State = 42; definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sys_setContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iro.IDENTIFIER, 0); }
		public ITerminalNode SET_OPEN() { return GetToken(iro.SET_OPEN, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iro.SET_CLOSE, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iro.ARRAY_SYM, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Sys_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sys_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterSys_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitSys_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSys_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sys_setContext sys_set() {
		Sys_setContext _localctx = new Sys_setContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_sys_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44; Match(IDENTIFIER);
			State = 46;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 45; Match(ARRAY_SYM);
				}
			}

			State = 48; Match(SET_OPEN);
			State = 52;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << ARRAY_SYM) | (1L << COLON_SYM))) != 0)) {
				{
				{
				State = 49; statement();
				}
				}
				State = 54;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 55; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public ITerminalNode COLON_SYM() { return GetToken(iro.COLON_SYM, 0); }
		public Typed_setContext typed_set() {
			return GetRuleContext<Typed_setContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(iro.IDENTIFIER, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iro.ARRAY_SYM, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 57; Match(IDENTIFIER);
				}
			}

			State = 61;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 60; Match(ARRAY_SYM);
				}
			}

			State = 63; Match(COLON_SYM);
			State = 64; typed_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_setContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iro.IDENTIFIER, 0); }
		public ITerminalNode SET_OPEN() { return GetToken(iro.SET_OPEN, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iro.SET_CLOSE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Typed_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterTyped_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitTyped_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_setContext typed_set() {
		Typed_setContext _localctx = new Typed_setContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_typed_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(IDENTIFIER);
			State = 67; Match(SET_OPEN);
			State = 71;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IDENTIFIER) | (1L << ARRAY_SYM) | (1L << COLON_SYM))) != 0)) {
				{
				{
				State = 68; statement();
				}
				}
				State = 73;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 74; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public ITerminalNode COLON_SYM() { return GetToken(iro.COLON_SYM, 0); }
		public ITerminalNode INCLUDE() { return GetToken(iro.INCLUDE, 0); }
		public ITerminalNode[] QUOTE_SYM() { return GetTokens(iro.QUOTE_SYM); }
		public ITerminalNode QUOTE_SYM(int i) {
			return GetToken(iro.QUOTE_SYM, i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(iro.IDENTIFIER, 0); }
		public ITerminalNode SEMICOLON_SYM() { return GetToken(iro.SEMICOLON_SYM, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(COLON_SYM);
			State = 77; Match(INCLUDE);
			State = 78; Match(QUOTE_SYM);
			State = 79; Match(IDENTIFIER);
			State = 80; Match(QUOTE_SYM);
			State = 81; Match(SEMICOLON_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public ITerminalNode EQUALS_SYM() { return GetToken(iro.EQUALS_SYM, 0); }
		public ITerminalNode REG_EQUALS_SYM() { return GetToken(iro.REG_EQUALS_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(iro.IDENTIFIER, 0); }
		public RegexContext regex() {
			return GetRuleContext<RegexContext>(0);
		}
		public Constant_refContext constant_ref() {
			return GetRuleContext<Constant_refContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode ARRAY_SYM() { return GetToken(iro.ARRAY_SYM, 0); }
		public ITerminalNode SEMICOLON_SYM() { return GetToken(iro.SEMICOLON_SYM, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 83; Match(ARRAY_SYM);
				}
			}

			State = 86;
			_la = _input.La(1);
			if ( !(_la==EQUALS_SYM || _la==REG_EQUALS_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 91;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 87; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 88; regex();
				}
				break;

			case 3:
				{
				State = 89; constant_ref();
				}
				break;

			case 4:
				{
				State = 90; array();
				}
				break;
			}
			State = 94;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON_SYM) {
				{
				State = 93; Match(SEMICOLON_SYM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(iro.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(iro.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA_SYM() { return GetTokens(iro.COMMA_SYM); }
		public ITerminalNode COMMA_SYM(int i) {
			return GetToken(iro.COMMA_SYM, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_array);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 96; Match(IDENTIFIER);
					State = 97; Match(COMMA_SYM);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 100;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 102; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexContext : ParserRuleContext {
		public ITerminalNode REGEX() { return GetToken(iro.REGEX, 0); }
		public RegexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterRegex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitRegex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexContext regex() {
		RegexContext _localctx = new RegexContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_regex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(REGEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_refContext : ParserRuleContext {
		public ITerminalNode[] REF_SYM() { return GetTokens(iro.REF_SYM); }
		public ITerminalNode REF_SYM(int i) {
			return GetToken(iro.REF_SYM, i);
		}
		public ITerminalNode SET_OPEN() { return GetToken(iro.SET_OPEN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(iro.IDENTIFIER, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iro.SET_CLOSE, 0); }
		public Constant_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterConstant_ref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitConstant_ref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_refContext constant_ref() {
		Constant_refContext _localctx = new Constant_refContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_constant_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; Match(REF_SYM);
			State = 107; Match(REF_SYM);
			State = 108; Match(SET_OPEN);
			State = 109; Match(IDENTIFIER);
			State = 110; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\xFs\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x3\x2\a\x2\x1C\n\x2\f\x2\xE\x2"+
		"\x1F\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3%\n\x3\x3\x4\x3\x4\x3\x4\x5\x4"+
		"*\n\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6\x31\n\x6\x3\x6\x3\x6\a\x6\x35"+
		"\n\x6\f\x6\xE\x6\x38\v\x6\x3\x6\x3\x6\x3\a\x5\a=\n\a\x3\a\x5\a@\n\a\x3"+
		"\a\x3\a\x3\a\x3\b\x3\b\x3\b\a\bH\n\b\f\b\xE\bK\v\b\x3\b\x3\b\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x5\nW\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n"+
		"^\n\n\x3\n\x5\n\x61\n\n\x3\v\x3\v\x6\v\x65\n\v\r\v\xE\v\x66\x3\v\x3\v"+
		"\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x2\x2\x2\xE\x2\x2\x4\x2"+
		"\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x2\x3\x3"+
		"\x2\v\fu\x2\x1D\x3\x2\x2\x2\x4$\x3\x2\x2\x2\x6)\x3\x2\x2\x2\b+\x3\x2\x2"+
		"\x2\n.\x3\x2\x2\x2\f<\x3\x2\x2\x2\xE\x44\x3\x2\x2\x2\x10N\x3\x2\x2\x2"+
		"\x12V\x3\x2\x2\x2\x14\x64\x3\x2\x2\x2\x16j\x3\x2\x2\x2\x18l\x3\x2\x2\x2"+
		"\x1A\x1C\x5\x4\x3\x2\x1B\x1A\x3\x2\x2\x2\x1C\x1F\x3\x2\x2\x2\x1D\x1B\x3"+
		"\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E \x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2 !\a"+
		"\x2\x2\x3!\x3\x3\x2\x2\x2\"%\x5\x6\x4\x2#%\x5\n\x6\x2$\"\x3\x2\x2\x2$"+
		"#\x3\x2\x2\x2%\x5\x3\x2\x2\x2&*\x5\b\x5\x2\'*\x5\f\a\x2(*\x5\x10\t\x2"+
		")&\x3\x2\x2\x2)\'\x3\x2\x2\x2)(\x3\x2\x2\x2*\a\x3\x2\x2\x2+,\a\x3\x2\x2"+
		",-\x5\x12\n\x2-\t\x3\x2\x2\x2.\x30\a\x3\x2\x2/\x31\a\x4\x2\x2\x30/\x3"+
		"\x2\x2\x2\x30\x31\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x36\a\x5\x2\x2\x33"+
		"\x35\x5\x6\x4\x2\x34\x33\x3\x2\x2\x2\x35\x38\x3\x2\x2\x2\x36\x34\x3\x2"+
		"\x2\x2\x36\x37\x3\x2\x2\x2\x37\x39\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x39"+
		":\a\x6\x2\x2:\v\x3\x2\x2\x2;=\a\x3\x2\x2<;\x3\x2\x2\x2<=\x3\x2\x2\x2="+
		"?\x3\x2\x2\x2>@\a\x4\x2\x2?>\x3\x2\x2\x2?@\x3\x2\x2\x2@\x41\x3\x2\x2\x2"+
		"\x41\x42\a\a\x2\x2\x42\x43\x5\xE\b\x2\x43\r\x3\x2\x2\x2\x44\x45\a\x3\x2"+
		"\x2\x45I\a\x5\x2\x2\x46H\x5\x6\x4\x2G\x46\x3\x2\x2\x2HK\x3\x2\x2\x2IG"+
		"\x3\x2\x2\x2IJ\x3\x2\x2\x2JL\x3\x2\x2\x2KI\x3\x2\x2\x2LM\a\x6\x2\x2M\xF"+
		"\x3\x2\x2\x2NO\a\a\x2\x2OP\a\b\x2\x2PQ\a\t\x2\x2QR\a\x3\x2\x2RS\a\t\x2"+
		"\x2ST\a\n\x2\x2T\x11\x3\x2\x2\x2UW\a\x4\x2\x2VU\x3\x2\x2\x2VW\x3\x2\x2"+
		"\x2WX\x3\x2\x2\x2X]\t\x2\x2\x2Y^\a\x3\x2\x2Z^\x5\x16\f\x2[^\x5\x18\r\x2"+
		"\\^\x5\x14\v\x2]Y\x3\x2\x2\x2]Z\x3\x2\x2\x2][\x3\x2\x2\x2]\\\x3\x2\x2"+
		"\x2^`\x3\x2\x2\x2_\x61\a\n\x2\x2`_\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x13"+
		"\x3\x2\x2\x2\x62\x63\a\x3\x2\x2\x63\x65\a\r\x2\x2\x64\x62\x3\x2\x2\x2"+
		"\x65\x66\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gh\x3\x2\x2\x2"+
		"hi\a\x3\x2\x2i\x15\x3\x2\x2\x2jk\a\xE\x2\x2k\x17\x3\x2\x2\x2lm\a\xF\x2"+
		"\x2mn\a\xF\x2\x2no\a\x5\x2\x2op\a\x3\x2\x2pq\a\x6\x2\x2q\x19\x3\x2\x2"+
		"\x2\xE\x1D$)\x30\x36<?IV]`\x66";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace iro4cli.Grammar
