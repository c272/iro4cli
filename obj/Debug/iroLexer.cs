//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Larry\Files\Programming\iro4cli\Grammar\iro.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace iro4cli.Grammar {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class iroLexer : Lexer {
	public const int
		REGEX=1, INCLUDE=2, REG_EQUALS_SYM=3, EQUALS_SYM=4, ARRAY_SYM=5, COMMA_SYM=6, 
		L_SQUARE_BRACKET=7, R_SQUARE_BRACKET=8, SET_OPEN=9, SET_CLOSE=10, COLON_SYM=11, 
		SEMICOLON_SYM=12, QUOTE_SYM=13, REF_SYM=14, L_BRACKET=15, R_BRACKET=16, 
		IDENTIFIER=17, COMMENT=18, WS=19, UNKNOWN_SYMBOL=20;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"REGEX", "INCLUDE", "REG_EQUALS_SYM", "EQUALS_SYM", "ARRAY_SYM", "COMMA_SYM", 
		"L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "SET_OPEN", "SET_CLOSE", "COLON_SYM", 
		"SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "L_BRACKET", "R_BRACKET", "IDENTIFIER", 
		"COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public iroLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'include'", "'\\='", "'='", "'[]'", "','", "'['", "']'", 
		"'{'", "'}'", "':'", "';'", "'\"'", "'$'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "REGEX", "INCLUDE", "REG_EQUALS_SYM", "EQUALS_SYM", "ARRAY_SYM", 
		"COMMA_SYM", "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "SET_OPEN", "SET_CLOSE", 
		"COLON_SYM", "SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "L_BRACKET", "R_BRACKET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "iro.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x16u\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x6\x2.\n\x2\r\x2\xE\x2/\x3\x2\x5\x2\x33\n\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3"+
		"\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11"+
		"\x3\x11\x3\x12\x6\x12^\n\x12\r\x12\xE\x12_\x3\x13\x3\x13\a\x13\x64\n\x13"+
		"\f\x13\xE\x13g\v\x13\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x6\x14n\n\x14"+
		"\r\x14\xE\x14o\x3\x14\x3\x14\x3\x15\x3\x15\x3\x65\x2\x2\x16\x3\x2\x3\x5"+
		"\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2"+
		"\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13"+
		"%\x2\x14\'\x2\x15)\x2\x16\x3\x2\x5\x3\x2*+\a\x2/\x30\x32;\x43\\\x61\x61"+
		"\x63|\x5\x2\v\f\xF\xF\"\"y\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3"+
		"\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3"+
		"\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2"+
		"\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2"+
		"\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2"+
		"\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x3+\x3\x2\x2\x2\x5\x36\x3\x2\x2\x2\a"+
		">\x3\x2\x2\x2\t\x41\x3\x2\x2\x2\v\x43\x3\x2\x2\x2\r\x46\x3\x2\x2\x2\xF"+
		"H\x3\x2\x2\x2\x11J\x3\x2\x2\x2\x13L\x3\x2\x2\x2\x15N\x3\x2\x2\x2\x17P"+
		"\x3\x2\x2\x2\x19R\x3\x2\x2\x2\x1BT\x3\x2\x2\x2\x1DV\x3\x2\x2\x2\x1FX\x3"+
		"\x2\x2\x2!Z\x3\x2\x2\x2#]\x3\x2\x2\x2%\x61\x3\x2\x2\x2\'m\x3\x2\x2\x2"+
		")s\x3\x2\x2\x2+\x32\x5\x1F\x10\x2,.\n\x2\x2\x2-,\x3\x2\x2\x2./\x3\x2\x2"+
		"\x2/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31\x33\x5\x3\x2"+
		"\x2\x32-\x3\x2\x2\x2\x32\x31\x3\x2\x2\x2\x33\x34\x3\x2\x2\x2\x34\x35\x5"+
		"!\x11\x2\x35\x4\x3\x2\x2\x2\x36\x37\ak\x2\x2\x37\x38\ap\x2\x2\x38\x39"+
		"\a\x65\x2\x2\x39:\an\x2\x2:;\aw\x2\x2;<\a\x66\x2\x2<=\ag\x2\x2=\x6\x3"+
		"\x2\x2\x2>?\a^\x2\x2?@\a?\x2\x2@\b\x3\x2\x2\x2\x41\x42\a?\x2\x2\x42\n"+
		"\x3\x2\x2\x2\x43\x44\a]\x2\x2\x44\x45\a_\x2\x2\x45\f\x3\x2\x2\x2\x46G"+
		"\a.\x2\x2G\xE\x3\x2\x2\x2HI\a]\x2\x2I\x10\x3\x2\x2\x2JK\a_\x2\x2K\x12"+
		"\x3\x2\x2\x2LM\a}\x2\x2M\x14\x3\x2\x2\x2NO\a\x7F\x2\x2O\x16\x3\x2\x2\x2"+
		"PQ\a<\x2\x2Q\x18\x3\x2\x2\x2RS\a=\x2\x2S\x1A\x3\x2\x2\x2TU\a$\x2\x2U\x1C"+
		"\x3\x2\x2\x2VW\a&\x2\x2W\x1E\x3\x2\x2\x2XY\a*\x2\x2Y \x3\x2\x2\x2Z[\a"+
		"+\x2\x2[\"\x3\x2\x2\x2\\^\t\x3\x2\x2]\\\x3\x2\x2\x2^_\x3\x2\x2\x2_]\x3"+
		"\x2\x2\x2_`\x3\x2\x2\x2`$\x3\x2\x2\x2\x61\x65\a%\x2\x2\x62\x64\v\x2\x2"+
		"\x2\x63\x62\x3\x2\x2\x2\x64g\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x65\x63\x3"+
		"\x2\x2\x2\x66h\x3\x2\x2\x2g\x65\x3\x2\x2\x2hi\a\f\x2\x2ij\x3\x2\x2\x2"+
		"jk\b\x13\x2\x2k&\x3\x2\x2\x2ln\t\x4\x2\x2ml\x3\x2\x2\x2no\x3\x2\x2\x2"+
		"om\x3\x2\x2\x2op\x3\x2\x2\x2pq\x3\x2\x2\x2qr\b\x14\x2\x2r(\x3\x2\x2\x2"+
		"st\v\x2\x2\x2t*\x3\x2\x2\x2\b\x2/\x32_\x65o\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace iro4cli.Grammar
