//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Larry\Files\Programming\iro4cli\Grammar\iro.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace iro4cli.Grammar {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class iroParser : Parser {
	public const int
		REGEX=1, ESCAPED_BRACKET=2, REG_EQUALS_SYM=3, EQUALS_SYM=4, ARRAY_SYM=5, 
		COMMA_SYM=6, L_SQUARE_BRACKET=7, R_SQUARE_BRACKET=8, SET_OPEN=9, SET_CLOSE=10, 
		COLON_SYM=11, SEMICOLON_SYM=12, QUOTE_SYM=13, REF_SYM=14, L_BRACKET=15, 
		R_BRACKET=16, IDENTIFIER=17, COMMENT=18, WS=19, UNKNOWN_SYMBOL=20;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_attribute = 3, 
		RULE_sys_set = 4, RULE_set = 5, RULE_typed_set = 6, RULE_include = 7, 
		RULE_definition = 8, RULE_definition_ident = 9, RULE_array = 10, RULE_regex = 11, 
		RULE_constant_ref = 12;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "attribute", "sys_set", "set", "typed_set", 
		"include", "definition", "definition_ident", "array", "regex", "constant_ref"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'\\='", "'='", "'[]'", "','", "'['", "']'", "'{'", 
		"'}'", "':'", "';'", "'\"'", "'$'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "REGEX", "ESCAPED_BRACKET", "REG_EQUALS_SYM", "EQUALS_SYM", "ARRAY_SYM", 
		"COMMA_SYM", "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "SET_OPEN", "SET_CLOSE", 
		"COLON_SYM", "SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "L_BRACKET", "R_BRACKET", 
		"IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "iro.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public iroParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(iroParser.Eof, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 26; block();
				}
				}
				State = 31;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 32; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Sys_setContext sys_set() {
			return GetRuleContext<Sys_setContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 34; statement();
				}
				break;

			case 2:
				{
				State = 35; sys_set();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 38; attribute();
				}
				break;

			case 2:
				{
				State = 39; set();
				}
				break;

			case 3:
				{
				State = 40; include();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; Match(IDENTIFIER);
			State = 44; definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sys_setContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Sys_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sys_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterSys_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitSys_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSys_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sys_setContext sys_set() {
		Sys_setContext _localctx = new Sys_setContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_sys_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46; Match(IDENTIFIER);
			State = 48;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 47; Match(ARRAY_SYM);
				}
			}

			State = 50; Match(SET_OPEN);
			State = 54;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 51; statement();
				}
				}
				State = 56;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 57; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public ITerminalNode COLON_SYM() { return GetToken(iroParser.COLON_SYM, 0); }
		public Typed_setContext typed_set() {
			return GetRuleContext<Typed_setContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 59; Match(IDENTIFIER);
				}
			}

			State = 63;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 62; Match(ARRAY_SYM);
				}
			}

			State = 65; Match(COLON_SYM);
			State = 66; typed_set();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_setContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public ITerminalNode SEMICOLON_SYM() { return GetToken(iroParser.SEMICOLON_SYM, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Typed_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterTyped_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitTyped_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_setContext typed_set() {
		Typed_setContext _localctx = new Typed_setContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_typed_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(IDENTIFIER);
			State = 84;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SET_OPEN:
				{
				State = 69; Match(SET_OPEN);
				State = 73;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
					{
					{
					State = 70; statement();
					}
					}
					State = 75;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 76; Match(SET_CLOSE);
				}
				break;
			case ARRAY_SYM:
			case COLON_SYM:
			case IDENTIFIER:
				{
				State = 78;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 77; statement();
					}
					}
					State = 80;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0) );
				State = 82; Match(SEMICOLON_SYM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public ITerminalNode COLON_SYM() { return GetToken(iroParser.COLON_SYM, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(iroParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(iroParser.IDENTIFIER, i);
		}
		public ITerminalNode[] QUOTE_SYM() { return GetTokens(iroParser.QUOTE_SYM); }
		public ITerminalNode QUOTE_SYM(int i) {
			return GetToken(iroParser.QUOTE_SYM, i);
		}
		public ITerminalNode SEMICOLON_SYM() { return GetToken(iroParser.SEMICOLON_SYM, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; Match(COLON_SYM);
			State = 87; Match(IDENTIFIER);
			State = 88; Match(QUOTE_SYM);
			State = 89; Match(IDENTIFIER);
			State = 90; Match(QUOTE_SYM);
			State = 91; Match(SEMICOLON_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public ITerminalNode EQUALS_SYM() { return GetToken(iroParser.EQUALS_SYM, 0); }
		public ITerminalNode REG_EQUALS_SYM() { return GetToken(iroParser.REG_EQUALS_SYM, 0); }
		public Definition_identContext definition_ident() {
			return GetRuleContext<Definition_identContext>(0);
		}
		public RegexContext regex() {
			return GetRuleContext<RegexContext>(0);
		}
		public Constant_refContext constant_ref() {
			return GetRuleContext<Constant_refContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public ITerminalNode SEMICOLON_SYM() { return GetToken(iroParser.SEMICOLON_SYM, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 93; Match(ARRAY_SYM);
				}
			}

			State = 96;
			_la = _input.La(1);
			if ( !(_la==REG_EQUALS_SYM || _la==EQUALS_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				State = 97; definition_ident();
				}
				break;

			case 2:
				{
				State = 98; regex();
				}
				break;

			case 3:
				{
				State = 99; constant_ref();
				}
				break;

			case 4:
				{
				State = 100; array();
				}
				break;
			}
			State = 104;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 103; Match(SEMICOLON_SYM);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_identContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode[] QUOTE_SYM() { return GetTokens(iroParser.QUOTE_SYM); }
		public ITerminalNode QUOTE_SYM(int i) {
			return GetToken(iroParser.QUOTE_SYM, i);
		}
		public Definition_identContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_ident; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterDefinition_ident(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitDefinition_ident(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition_ident(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Definition_identContext definition_ident() {
		Definition_identContext _localctx = new Definition_identContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_definition_ident);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QUOTE_SYM) {
				{
				State = 106; Match(QUOTE_SYM);
				}
			}

			State = 109; Match(IDENTIFIER);
			State = 111;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==QUOTE_SYM) {
				{
				State = 110; Match(QUOTE_SYM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(iroParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(iroParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA_SYM() { return GetTokens(iroParser.COMMA_SYM); }
		public ITerminalNode COMMA_SYM(int i) {
			return GetToken(iroParser.COMMA_SYM, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_array);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 113; Match(IDENTIFIER);
					State = 114; Match(COMMA_SYM);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 117;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,15,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 119; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexContext : ParserRuleContext {
		public ITerminalNode REGEX() { return GetToken(iroParser.REGEX, 0); }
		public RegexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterRegex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitRegex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexContext regex() {
		RegexContext _localctx = new RegexContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_regex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; Match(REGEX);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_refContext : ParserRuleContext {
		public ITerminalNode[] REF_SYM() { return GetTokens(iroParser.REF_SYM); }
		public ITerminalNode REF_SYM(int i) {
			return GetToken(iroParser.REF_SYM, i);
		}
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public Constant_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterConstant_ref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitConstant_ref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_refContext constant_ref() {
		Constant_refContext _localctx = new Constant_refContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_constant_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(REF_SYM);
			State = 124; Match(REF_SYM);
			State = 125; Match(SET_OPEN);
			State = 126; Match(IDENTIFIER);
			State = 127; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x16\x84\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\a\x2\x1E\n\x2"+
		"\f\x2\xE\x2!\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3\'\n\x3\x3\x4\x3\x4\x3"+
		"\x4\x5\x4,\n\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6\x33\n\x6\x3\x6\x3"+
		"\x6\a\x6\x37\n\x6\f\x6\xE\x6:\v\x6\x3\x6\x3\x6\x3\a\x5\a?\n\a\x3\a\x5"+
		"\a\x42\n\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\a\bJ\n\b\f\b\xE\bM\v\b\x3\b\x3"+
		"\b\x6\bQ\n\b\r\b\xE\bR\x3\b\x3\b\x5\bW\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\n\x5\n\x61\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\nh\n\n\x3\n\x5\n"+
		"k\n\n\x3\v\x5\vn\n\v\x3\v\x3\v\x5\vr\n\v\x3\f\x3\f\x6\fv\n\f\r\f\xE\f"+
		"w\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xE\x2\x2"+
		"\x2\xF\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16"+
		"\x2\x18\x2\x1A\x2\x2\x3\x3\x2\x5\x6\x89\x2\x1F\x3\x2\x2\x2\x4&\x3\x2\x2"+
		"\x2\x6+\x3\x2\x2\x2\b-\x3\x2\x2\x2\n\x30\x3\x2\x2\x2\f>\x3\x2\x2\x2\xE"+
		"\x46\x3\x2\x2\x2\x10X\x3\x2\x2\x2\x12`\x3\x2\x2\x2\x14m\x3\x2\x2\x2\x16"+
		"u\x3\x2\x2\x2\x18{\x3\x2\x2\x2\x1A}\x3\x2\x2\x2\x1C\x1E\x5\x4\x3\x2\x1D"+
		"\x1C\x3\x2\x2\x2\x1E!\x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2\x1F \x3\x2\x2\x2"+
		" \"\x3\x2\x2\x2!\x1F\x3\x2\x2\x2\"#\a\x2\x2\x3#\x3\x3\x2\x2\x2$\'\x5\x6"+
		"\x4\x2%\'\x5\n\x6\x2&$\x3\x2\x2\x2&%\x3\x2\x2\x2\'\x5\x3\x2\x2\x2(,\x5"+
		"\b\x5\x2),\x5\f\a\x2*,\x5\x10\t\x2+(\x3\x2\x2\x2+)\x3\x2\x2\x2+*\x3\x2"+
		"\x2\x2,\a\x3\x2\x2\x2-.\a\x13\x2\x2./\x5\x12\n\x2/\t\x3\x2\x2\x2\x30\x32"+
		"\a\x13\x2\x2\x31\x33\a\a\x2\x2\x32\x31\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2"+
		"\x33\x34\x3\x2\x2\x2\x34\x38\a\v\x2\x2\x35\x37\x5\x6\x4\x2\x36\x35\x3"+
		"\x2\x2\x2\x37:\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39"+
		";\x3\x2\x2\x2:\x38\x3\x2\x2\x2;<\a\f\x2\x2<\v\x3\x2\x2\x2=?\a\x13\x2\x2"+
		">=\x3\x2\x2\x2>?\x3\x2\x2\x2?\x41\x3\x2\x2\x2@\x42\a\a\x2\x2\x41@\x3\x2"+
		"\x2\x2\x41\x42\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x44\a\r\x2\x2\x44\x45"+
		"\x5\xE\b\x2\x45\r\x3\x2\x2\x2\x46V\a\x13\x2\x2GK\a\v\x2\x2HJ\x5\x6\x4"+
		"\x2IH\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2LN\x3\x2\x2"+
		"\x2MK\x3\x2\x2\x2NW\a\f\x2\x2OQ\x5\x6\x4\x2PO\x3\x2\x2\x2QR\x3\x2\x2\x2"+
		"RP\x3\x2\x2\x2RS\x3\x2\x2\x2ST\x3\x2\x2\x2TU\a\xE\x2\x2UW\x3\x2\x2\x2"+
		"VG\x3\x2\x2\x2VP\x3\x2\x2\x2W\xF\x3\x2\x2\x2XY\a\r\x2\x2YZ\a\x13\x2\x2"+
		"Z[\a\xF\x2\x2[\\\a\x13\x2\x2\\]\a\xF\x2\x2]^\a\xE\x2\x2^\x11\x3\x2\x2"+
		"\x2_\x61\a\a\x2\x2`_\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2"+
		"\x62g\t\x2\x2\x2\x63h\x5\x14\v\x2\x64h\x5\x18\r\x2\x65h\x5\x1A\xE\x2\x66"+
		"h\x5\x16\f\x2g\x63\x3\x2\x2\x2g\x64\x3\x2\x2\x2g\x65\x3\x2\x2\x2g\x66"+
		"\x3\x2\x2\x2hj\x3\x2\x2\x2ik\a\xE\x2\x2ji\x3\x2\x2\x2jk\x3\x2\x2\x2k\x13"+
		"\x3\x2\x2\x2ln\a\xF\x2\x2ml\x3\x2\x2\x2mn\x3\x2\x2\x2no\x3\x2\x2\x2oq"+
		"\a\x13\x2\x2pr\a\xF\x2\x2qp\x3\x2\x2\x2qr\x3\x2\x2\x2r\x15\x3\x2\x2\x2"+
		"st\a\x13\x2\x2tv\a\b\x2\x2us\x3\x2\x2\x2vw\x3\x2\x2\x2wu\x3\x2\x2\x2w"+
		"x\x3\x2\x2\x2xy\x3\x2\x2\x2yz\a\x13\x2\x2z\x17\x3\x2\x2\x2{|\a\x3\x2\x2"+
		"|\x19\x3\x2\x2\x2}~\a\x10\x2\x2~\x7F\a\x10\x2\x2\x7F\x80\a\v\x2\x2\x80"+
		"\x81\a\x13\x2\x2\x81\x82\a\f\x2\x2\x82\x1B\x3\x2\x2\x2\x12\x1F&+\x32\x38"+
		">\x41KRV`gjmqw";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace iro4cli.Grammar
