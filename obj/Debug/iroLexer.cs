//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Larry\Files\Programming\iro4cli\Grammar\iro.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace iro4cli.Grammar {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class iroLexer : Lexer {
	public const int
		INCLUDE=1, REG_EQUALS_SYM=2, EQUALS_SYM=3, ARRAY_SYM=4, COMMA_SYM=5, L_SQUARE_BRACKET=6, 
		R_SQUARE_BRACKET=7, SET_OPEN=8, SET_CLOSE=9, L_BRACKET=10, R_BRACKET=11, 
		COLON_SYM=12, SEMICOLON_SYM=13, QUOTE_SYM=14, REF_SYM=15, IDENTIFIER=16, 
		COMMENT=17, WS=18, UNKNOWN_SYMBOL=19;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INCLUDE", "REG_EQUALS_SYM", "EQUALS_SYM", "ARRAY_SYM", "COMMA_SYM", "L_SQUARE_BRACKET", 
		"R_SQUARE_BRACKET", "SET_OPEN", "SET_CLOSE", "L_BRACKET", "R_BRACKET", 
		"COLON_SYM", "SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "IDENTIFIER", "COMMENT", 
		"WS", "UNKNOWN_SYMBOL"
	};


	public iroLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'include'", "'\\='", "'='", "'[]'", "','", "'['", "']'", "'{'", 
		"'}'", "'('", "')'", "':'", "';'", "'\"'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INCLUDE", "REG_EQUALS_SYM", "EQUALS_SYM", "ARRAY_SYM", "COMMA_SYM", 
		"L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "SET_OPEN", "SET_CLOSE", "L_BRACKET", 
		"R_BRACKET", "COLON_SYM", "SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "IDENTIFIER", 
		"COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "iro.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x15h\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\x3\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3"+
		"\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11"+
		"\x6\x11Q\n\x11\r\x11\xE\x11R\x3\x12\x3\x12\a\x12W\n\x12\f\x12\xE\x12Z"+
		"\v\x12\x3\x12\x3\x12\x3\x12\x3\x12\x3\x13\x6\x13\x61\n\x13\r\x13\xE\x13"+
		"\x62\x3\x13\x3\x13\x3\x14\x3\x14\x3X\x2\x2\x15\x3\x2\x3\x5\x2\x4\a\x2"+
		"\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r"+
		"\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2"+
		"\x15\x3\x2\x4\t\x2&&/\x30\x32;\x43\\\x61\x61\x63}\x7F\x7F\x5\x2\v\f\xF"+
		"\xF\"\"j\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3"+
		"\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3"+
		"\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2"+
		"\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2"+
		"\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x3"+
		")\x3\x2\x2\x2\x5\x31\x3\x2\x2\x2\a\x34\x3\x2\x2\x2\t\x36\x3\x2\x2\x2\v"+
		"\x39\x3\x2\x2\x2\r;\x3\x2\x2\x2\xF=\x3\x2\x2\x2\x11?\x3\x2\x2\x2\x13\x41"+
		"\x3\x2\x2\x2\x15\x43\x3\x2\x2\x2\x17\x45\x3\x2\x2\x2\x19G\x3\x2\x2\x2"+
		"\x1BI\x3\x2\x2\x2\x1DK\x3\x2\x2\x2\x1FM\x3\x2\x2\x2!P\x3\x2\x2\x2#T\x3"+
		"\x2\x2\x2%`\x3\x2\x2\x2\'\x66\x3\x2\x2\x2)*\ak\x2\x2*+\ap\x2\x2+,\a\x65"+
		"\x2\x2,-\an\x2\x2-.\aw\x2\x2./\a\x66\x2\x2/\x30\ag\x2\x2\x30\x4\x3\x2"+
		"\x2\x2\x31\x32\a^\x2\x2\x32\x33\a?\x2\x2\x33\x6\x3\x2\x2\x2\x34\x35\a"+
		"?\x2\x2\x35\b\x3\x2\x2\x2\x36\x37\a]\x2\x2\x37\x38\a_\x2\x2\x38\n\x3\x2"+
		"\x2\x2\x39:\a.\x2\x2:\f\x3\x2\x2\x2;<\a]\x2\x2<\xE\x3\x2\x2\x2=>\a_\x2"+
		"\x2>\x10\x3\x2\x2\x2?@\a}\x2\x2@\x12\x3\x2\x2\x2\x41\x42\a\x7F\x2\x2\x42"+
		"\x14\x3\x2\x2\x2\x43\x44\a*\x2\x2\x44\x16\x3\x2\x2\x2\x45\x46\a+\x2\x2"+
		"\x46\x18\x3\x2\x2\x2GH\a<\x2\x2H\x1A\x3\x2\x2\x2IJ\a=\x2\x2J\x1C\x3\x2"+
		"\x2\x2KL\a$\x2\x2L\x1E\x3\x2\x2\x2MN\a&\x2\x2N \x3\x2\x2\x2OQ\t\x2\x2"+
		"\x2PO\x3\x2\x2\x2QR\x3\x2\x2\x2RP\x3\x2\x2\x2RS\x3\x2\x2\x2S\"\x3\x2\x2"+
		"\x2TX\a%\x2\x2UW\v\x2\x2\x2VU\x3\x2\x2\x2WZ\x3\x2\x2\x2XY\x3\x2\x2\x2"+
		"XV\x3\x2\x2\x2Y[\x3\x2\x2\x2ZX\x3\x2\x2\x2[\\\a\f\x2\x2\\]\x3\x2\x2\x2"+
		"]^\b\x12\x2\x2^$\x3\x2\x2\x2_\x61\t\x3\x2\x2`_\x3\x2\x2\x2\x61\x62\x3"+
		"\x2\x2\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64"+
		"\x65\b\x13\x2\x2\x65&\x3\x2\x2\x2\x66g\v\x2\x2\x2g(\x3\x2\x2\x2\x6\x2"+
		"RX\x62\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace iro4cli.Grammar
