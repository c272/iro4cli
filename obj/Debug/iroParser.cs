//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\VSProjects\_iro\iro4cli\Grammar\iro.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace iro4cli.Grammar {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class iroParser : Parser {
	public const int
		INCLUDE=1, REG_EQUALS_SYM=2, EQUALS_SYM=3, ARRAY_SYM=4, L_SQUARE_BRACKET=5, 
		R_SQUARE_BRACKET=6, SET_OPEN=7, SET_CLOSE=8, L_BRACKET=9, R_BRACKET=10, 
		COLON_SYM=11, SEMICOLON_SYM=12, QUOTE_SYM=13, REF_SYM=14, IDENTIFIER=15, 
		COMMENT=16, WS=17, UNKNOWN_SYMBOL=18;
	public const int
		RULE_compileUnit = 0, RULE_statement = 1, RULE_attribute = 2, RULE_sys_set = 3, 
		RULE_set = 4, RULE_include = 5, RULE_definition = 6, RULE_regex = 7, RULE_constant_ref = 8;
	public static readonly string[] ruleNames = {
		"compileUnit", "statement", "attribute", "sys_set", "set", "include", 
		"definition", "regex", "constant_ref"
	};

	private static readonly string[] _LiteralNames = {
		null, "'include'", "'\\='", "'='", "'[]'", "'['", "']'", "'{'", "'}'", 
		"'('", "')'", "':'", "';'", "'\"'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INCLUDE", "REG_EQUALS_SYM", "EQUALS_SYM", "ARRAY_SYM", "L_SQUARE_BRACKET", 
		"R_SQUARE_BRACKET", "SET_OPEN", "SET_CLOSE", "L_BRACKET", "R_BRACKET", 
		"COLON_SYM", "SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "IDENTIFIER", "COMMENT", 
		"WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "iro.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public iroParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(iroParser.Eof, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 18; statement();
				}
				}
				State = 23;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 24; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public Sys_setContext sys_set() {
			return GetRuleContext<Sys_setContext>(0);
		}
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 26; attribute();
				}
				break;

			case 2:
				{
				State = 27; sys_set();
				}
				break;

			case 3:
				{
				State = 28; set();
				}
				break;

			case 4:
				{
				State = 29; include();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public ITerminalNode EQUALS_SYM() { return GetToken(iroParser.EQUALS_SYM, 0); }
		public ITerminalNode REG_EQUALS_SYM() { return GetToken(iroParser.REG_EQUALS_SYM, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(IDENTIFIER);
			State = 34;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 33; Match(ARRAY_SYM);
				}
			}

			State = 36;
			_la = _input.La(1);
			if ( !(_la==REG_EQUALS_SYM || _la==EQUALS_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 37; definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sys_setContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Sys_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sys_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterSys_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitSys_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSys_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sys_setContext sys_set() {
		Sys_setContext _localctx = new Sys_setContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_sys_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(IDENTIFIER);
			State = 41;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 40; Match(ARRAY_SYM);
				}
			}

			State = 43; Match(SET_OPEN);
			State = 47;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 44; statement();
				}
				}
				State = 49;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 50; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public ITerminalNode COLON_SYM() { return GetToken(iroParser.COLON_SYM, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(iroParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(iroParser.IDENTIFIER, i);
		}
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 52; Match(IDENTIFIER);
				}
			}

			State = 56;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 55; Match(ARRAY_SYM);
				}
			}

			State = 58; Match(COLON_SYM);
			State = 59; Match(IDENTIFIER);
			State = 60; Match(SET_OPEN);
			State = 64;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 61; statement();
				}
				}
				State = 66;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 67; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public ITerminalNode COLON_SYM() { return GetToken(iroParser.COLON_SYM, 0); }
		public ITerminalNode INCLUDE() { return GetToken(iroParser.INCLUDE, 0); }
		public ITerminalNode[] QUOTE_SYM() { return GetTokens(iroParser.QUOTE_SYM); }
		public ITerminalNode QUOTE_SYM(int i) {
			return GetToken(iroParser.QUOTE_SYM, i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(COLON_SYM);
			State = 70; Match(INCLUDE);
			State = 71; Match(QUOTE_SYM);
			State = 72; Match(IDENTIFIER);
			State = 73; Match(QUOTE_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public RegexContext regex() {
			return GetRuleContext<RegexContext>(0);
		}
		public Constant_refContext constant_ref() {
			return GetRuleContext<Constant_refContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				{
				State = 75; Match(IDENTIFIER);
				}
				break;
			case L_BRACKET:
				{
				State = 76; regex();
				}
				break;
			case REF_SYM:
				{
				State = 77; constant_ref();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(iroParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(iroParser.R_BRACKET, 0); }
		public RegexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterRegex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitRegex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexContext regex() {
		RegexContext _localctx = new RegexContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_regex);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(L_BRACKET);
			State = 84;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 81;
					MatchWildcard();
					}
					} 
				}
				State = 86;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			State = 87; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_refContext : ParserRuleContext {
		public ITerminalNode[] REF_SYM() { return GetTokens(iroParser.REF_SYM); }
		public ITerminalNode REF_SYM(int i) {
			return GetToken(iroParser.REF_SYM, i);
		}
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public Constant_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterConstant_ref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitConstant_ref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_refContext constant_ref() {
		Constant_refContext _localctx = new Constant_refContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_constant_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(REF_SYM);
			State = 90; Match(REF_SYM);
			State = 91; Match(SET_OPEN);
			State = 92; Match(IDENTIFIER);
			State = 93; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x14\x62\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x3\x2\a\x2\x16\n\x2\f\x2\xE\x2\x19\v\x2\x3\x2\x3\x2\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x5\x3!\n\x3\x3\x4\x3\x4\x5\x4%\n\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x5\x3\x5\x5\x5,\n\x5\x3\x5\x3\x5\a\x5\x30\n\x5\f\x5\xE\x5\x33\v"+
		"\x5\x3\x5\x3\x5\x3\x6\x5\x6\x38\n\x6\x3\x6\x5\x6;\n\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\a\x6\x41\n\x6\f\x6\xE\x6\x44\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x5\bQ\n\b\x3\t\x3\t\a\tU\n\t\f\t\xE\tX"+
		"\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x2\x2\x2\v\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x2\x3\x3\x2\x4\x5\x65\x2"+
		"\x17\x3\x2\x2\x2\x4 \x3\x2\x2\x2\x6\"\x3\x2\x2\x2\b)\x3\x2\x2\x2\n\x37"+
		"\x3\x2\x2\x2\fG\x3\x2\x2\x2\xEP\x3\x2\x2\x2\x10R\x3\x2\x2\x2\x12[\x3\x2"+
		"\x2\x2\x14\x16\x5\x4\x3\x2\x15\x14\x3\x2\x2\x2\x16\x19\x3\x2\x2\x2\x17"+
		"\x15\x3\x2\x2\x2\x17\x18\x3\x2\x2\x2\x18\x1A\x3\x2\x2\x2\x19\x17\x3\x2"+
		"\x2\x2\x1A\x1B\a\x2\x2\x3\x1B\x3\x3\x2\x2\x2\x1C!\x5\x6\x4\x2\x1D!\x5"+
		"\b\x5\x2\x1E!\x5\n\x6\x2\x1F!\x5\f\a\x2 \x1C\x3\x2\x2\x2 \x1D\x3\x2\x2"+
		"\x2 \x1E\x3\x2\x2\x2 \x1F\x3\x2\x2\x2!\x5\x3\x2\x2\x2\"$\a\x11\x2\x2#"+
		"%\a\x6\x2\x2$#\x3\x2\x2\x2$%\x3\x2\x2\x2%&\x3\x2\x2\x2&\'\t\x2\x2\x2\'"+
		"(\x5\xE\b\x2(\a\x3\x2\x2\x2)+\a\x11\x2\x2*,\a\x6\x2\x2+*\x3\x2\x2\x2+"+
		",\x3\x2\x2\x2,-\x3\x2\x2\x2-\x31\a\t\x2\x2.\x30\x5\x4\x3\x2/.\x3\x2\x2"+
		"\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2\x2\x2\x32\x34\x3"+
		"\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\x35\a\n\x2\x2\x35\t\x3\x2\x2\x2\x36"+
		"\x38\a\x11\x2\x2\x37\x36\x3\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38:\x3\x2\x2"+
		"\x2\x39;\a\x6\x2\x2:\x39\x3\x2\x2\x2:;\x3\x2\x2\x2;<\x3\x2\x2\x2<=\a\r"+
		"\x2\x2=>\a\x11\x2\x2>\x42\a\t\x2\x2?\x41\x5\x4\x3\x2@?\x3\x2\x2\x2\x41"+
		"\x44\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x42\x43\x3\x2\x2\x2\x43\x45\x3\x2\x2"+
		"\x2\x44\x42\x3\x2\x2\x2\x45\x46\a\n\x2\x2\x46\v\x3\x2\x2\x2GH\a\r\x2\x2"+
		"HI\a\x3\x2\x2IJ\a\xF\x2\x2JK\a\x11\x2\x2KL\a\xF\x2\x2L\r\x3\x2\x2\x2M"+
		"Q\a\x11\x2\x2NQ\x5\x10\t\x2OQ\x5\x12\n\x2PM\x3\x2\x2\x2PN\x3\x2\x2\x2"+
		"PO\x3\x2\x2\x2Q\xF\x3\x2\x2\x2RV\a\v\x2\x2SU\v\x2\x2\x2TS\x3\x2\x2\x2"+
		"UX\x3\x2\x2\x2VT\x3\x2\x2\x2VW\x3\x2\x2\x2WY\x3\x2\x2\x2XV\x3\x2\x2\x2"+
		"YZ\a\f\x2\x2Z\x11\x3\x2\x2\x2[\\\a\x10\x2\x2\\]\a\x10\x2\x2]^\a\t\x2\x2"+
		"^_\a\x11\x2\x2_`\a\n\x2\x2`\x13\x3\x2\x2\x2\f\x17 $+\x31\x37:\x42PV";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace iro4cli.Grammar
