//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Larry\Files\Programming\iro4cli\Grammar\iro.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace iro4cli.Grammar {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class iroParserLexer : Lexer {
	public const int
		INCLUDE=1, REG_EQUALS_SYM=2, EQUALS_SYM=3, ARRAY_SYM=4, COMMA_SYM=5, L_SQUARE_BRACKET=6, 
		R_SQUARE_BRACKET=7, SET_OPEN=8, SET_CLOSE=9, COLON_SYM=10, SEMICOLON_SYM=11, 
		QUOTE_SYM=12, REF_SYM=13, IDENTIFIER=14, COMMENT=15, WS=16, UNKNOWN_SYMBOL=17;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INCLUDE", "REG_EQUALS_SYM", "EQUALS_SYM", "ARRAY_SYM", "COMMA_SYM", "L_SQUARE_BRACKET", 
		"R_SQUARE_BRACKET", "SET_OPEN", "SET_CLOSE", "COLON_SYM", "SEMICOLON_SYM", 
		"QUOTE_SYM", "REF_SYM", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


		//The depth of the brackets.
		int depth = 0;


	public iroParserLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'include'", "'\\='", "'='", "'[]'", "','", "'['", "']'", "'{'", 
		"'}'", "':'", "';'", "'\"'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INCLUDE", "REG_EQUALS_SYM", "EQUALS_SYM", "ARRAY_SYM", "COMMA_SYM", 
		"L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "SET_OPEN", "SET_CLOSE", "COLON_SYM", 
		"SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "IDENTIFIER", "COMMENT", "WS", 
		"UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "iro.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x13`\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6"+
		"\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r"+
		"\x3\xE\x3\xE\x3\xF\x6\xFI\n\xF\r\xF\xE\xFJ\x3\x10\x3\x10\a\x10O\n\x10"+
		"\f\x10\xE\x10R\v\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x6\x11Y\n\x11"+
		"\r\x11\xE\x11Z\x3\x11\x3\x11\x3\x12\x3\x12\x3P\x2\x2\x13\x3\x2\x3\x5\x2"+
		"\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17"+
		"\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13\x3\x2"+
		"\x4\a\x2/\x30\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF\xF\"\"\x62\x2\x3\x3"+
		"\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3"+
		"\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13"+
		"\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2"+
		"\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2"+
		"\x2\x2#\x3\x2\x2\x2\x3%\x3\x2\x2\x2\x5-\x3\x2\x2\x2\a\x30\x3\x2\x2\x2"+
		"\t\x32\x3\x2\x2\x2\v\x35\x3\x2\x2\x2\r\x37\x3\x2\x2\x2\xF\x39\x3\x2\x2"+
		"\x2\x11;\x3\x2\x2\x2\x13=\x3\x2\x2\x2\x15?\x3\x2\x2\x2\x17\x41\x3\x2\x2"+
		"\x2\x19\x43\x3\x2\x2\x2\x1B\x45\x3\x2\x2\x2\x1DH\x3\x2\x2\x2\x1FL\x3\x2"+
		"\x2\x2!X\x3\x2\x2\x2#^\x3\x2\x2\x2%&\ak\x2\x2&\'\ap\x2\x2\'(\a\x65\x2"+
		"\x2()\an\x2\x2)*\aw\x2\x2*+\a\x66\x2\x2+,\ag\x2\x2,\x4\x3\x2\x2\x2-.\a"+
		"^\x2\x2./\a?\x2\x2/\x6\x3\x2\x2\x2\x30\x31\a?\x2\x2\x31\b\x3\x2\x2\x2"+
		"\x32\x33\a]\x2\x2\x33\x34\a_\x2\x2\x34\n\x3\x2\x2\x2\x35\x36\a.\x2\x2"+
		"\x36\f\x3\x2\x2\x2\x37\x38\a]\x2\x2\x38\xE\x3\x2\x2\x2\x39:\a_\x2\x2:"+
		"\x10\x3\x2\x2\x2;<\a}\x2\x2<\x12\x3\x2\x2\x2=>\a\x7F\x2\x2>\x14\x3\x2"+
		"\x2\x2?@\a<\x2\x2@\x16\x3\x2\x2\x2\x41\x42\a=\x2\x2\x42\x18\x3\x2\x2\x2"+
		"\x43\x44\a$\x2\x2\x44\x1A\x3\x2\x2\x2\x45\x46\a&\x2\x2\x46\x1C\x3\x2\x2"+
		"\x2GI\t\x2\x2\x2HG\x3\x2\x2\x2IJ\x3\x2\x2\x2JH\x3\x2\x2\x2JK\x3\x2\x2"+
		"\x2K\x1E\x3\x2\x2\x2LP\a%\x2\x2MO\v\x2\x2\x2NM\x3\x2\x2\x2OR\x3\x2\x2"+
		"\x2PQ\x3\x2\x2\x2PN\x3\x2\x2\x2QS\x3\x2\x2\x2RP\x3\x2\x2\x2ST\a\f\x2\x2"+
		"TU\x3\x2\x2\x2UV\b\x10\x2\x2V \x3\x2\x2\x2WY\t\x3\x2\x2XW\x3\x2\x2\x2"+
		"YZ\x3\x2\x2\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[\\\x3\x2\x2\x2\\]\b\x11\x2"+
		"\x2]\"\x3\x2\x2\x2^_\v\x2\x2\x2_$\x3\x2\x2\x2\x6\x2JPZ\x3\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace iro4cli.Grammar
