//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\VSProjects\_iro\iro4cli\Grammar\iro.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace iro4cli.Grammar {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class iroLexer : Lexer {
	public const int
		REGEX=1, INCLUDE=2, ESCAPED_BRACKET=3, REG_EQUALS_SYM=4, EQUALS_SYM=5, 
		ARRAY_SYM=6, COMMA_SYM=7, L_SQUARE_BRACKET=8, R_SQUARE_BRACKET=9, SET_OPEN=10, 
		SET_CLOSE=11, COLON_SYM=12, SEMICOLON_SYM=13, QUOTE_SYM=14, REF_SYM=15, 
		L_BRACKET=16, R_BRACKET=17, IDENTIFIER=18, COMMENT=19, WS=20, UNKNOWN_SYMBOL=21;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"REGEX", "INCLUDE", "ESCAPED_BRACKET", "REG_EQUALS_SYM", "EQUALS_SYM", 
		"ARRAY_SYM", "COMMA_SYM", "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "SET_OPEN", 
		"SET_CLOSE", "COLON_SYM", "SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "L_BRACKET", 
		"R_BRACKET", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};


	public iroLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'include'", null, "'\\='", "'='", "'[]'", "','", "'['", "']'", 
		"'{'", "'}'", "':'", "';'", "'\"'", "'$'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "REGEX", "INCLUDE", "ESCAPED_BRACKET", "REG_EQUALS_SYM", "EQUALS_SYM", 
		"ARRAY_SYM", "COMMA_SYM", "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "SET_OPEN", 
		"SET_CLOSE", "COLON_SYM", "SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "L_BRACKET", 
		"R_BRACKET", "IDENTIFIER", "COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "iro.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x17\x85\b\x1\x4"+
		"\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b"+
		"\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4"+
		"\x10\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15"+
		"\t\x15\x4\x16\t\x16\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x35"+
		"\n\x2\f\x2\xE\x2\x38\v\x2\x3\x2\x3\x2\x5\x2<\n\x2\x3\x2\x5\x2?\n\x2\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x5\x4M\n\x4\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3"+
		"\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF"+
		"\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x6\x13n\n\x13\r\x13"+
		"\xE\x13o\x3\x14\x3\x14\a\x14t\n\x14\f\x14\xE\x14w\v\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x15\x6\x15~\n\x15\r\x15\xE\x15\x7F\x3\x15\x3\x15\x3"+
		"\x16\x3\x16\x3u\x2\x2\x17\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2"+
		"\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D"+
		"\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17\x3"+
		"\x2\x5\x5\x2\f\f\xF\xF*+\a\x2/\x30\x32;\x43\\\x61\x61\x63|\x5\x2\v\f\xF"+
		"\xF\"\"\x8E\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t"+
		"\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11"+
		"\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2"+
		"\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2"+
		"\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2"+
		"\x2)\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x3-\x3\x2\x2\x2\x5@\x3\x2\x2\x2\aL\x3"+
		"\x2\x2\x2\tN\x3\x2\x2\x2\vQ\x3\x2\x2\x2\rS\x3\x2\x2\x2\xFV\x3\x2\x2\x2"+
		"\x11X\x3\x2\x2\x2\x13Z\x3\x2\x2\x2\x15\\\x3\x2\x2\x2\x17^\x3\x2\x2\x2"+
		"\x19`\x3\x2\x2\x2\x1B\x62\x3\x2\x2\x2\x1D\x64\x3\x2\x2\x2\x1F\x66\x3\x2"+
		"\x2\x2!h\x3\x2\x2\x2#j\x3\x2\x2\x2%m\x3\x2\x2\x2\'q\x3\x2\x2\x2)}\x3\x2"+
		"\x2\x2+\x83\x3\x2\x2\x2-\x36\x5!\x11\x2.\x35\n\x2\x2\x2/\x30\a^\x2\x2"+
		"\x30\x35\a*\x2\x2\x31\x32\a^\x2\x2\x32\x35\a+\x2\x2\x33\x35\x5\x3\x2\x2"+
		"\x34.\x3\x2\x2\x2\x34/\x3\x2\x2\x2\x34\x31\x3\x2\x2\x2\x34\x33\x3\x2\x2"+
		"\x2\x35\x38\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x39"+
		"\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x39;\x5#\x12\x2:<\a~\x2\x2;:\x3\x2\x2"+
		"\x2;<\x3\x2\x2\x2<>\x3\x2\x2\x2=?\x5\x3\x2\x2>=\x3\x2\x2\x2>?\x3\x2\x2"+
		"\x2?\x4\x3\x2\x2\x2@\x41\ak\x2\x2\x41\x42\ap\x2\x2\x42\x43\a\x65\x2\x2"+
		"\x43\x44\an\x2\x2\x44\x45\aw\x2\x2\x45\x46\a\x66\x2\x2\x46G\ag\x2\x2G"+
		"\x6\x3\x2\x2\x2HI\a^\x2\x2IM\a*\x2\x2JK\a^\x2\x2KM\a+\x2\x2LH\x3\x2\x2"+
		"\x2LJ\x3\x2\x2\x2M\b\x3\x2\x2\x2NO\a^\x2\x2OP\a?\x2\x2P\n\x3\x2\x2\x2"+
		"QR\a?\x2\x2R\f\x3\x2\x2\x2ST\a]\x2\x2TU\a_\x2\x2U\xE\x3\x2\x2\x2VW\a."+
		"\x2\x2W\x10\x3\x2\x2\x2XY\a]\x2\x2Y\x12\x3\x2\x2\x2Z[\a_\x2\x2[\x14\x3"+
		"\x2\x2\x2\\]\a}\x2\x2]\x16\x3\x2\x2\x2^_\a\x7F\x2\x2_\x18\x3\x2\x2\x2"+
		"`\x61\a<\x2\x2\x61\x1A\x3\x2\x2\x2\x62\x63\a=\x2\x2\x63\x1C\x3\x2\x2\x2"+
		"\x64\x65\a$\x2\x2\x65\x1E\x3\x2\x2\x2\x66g\a&\x2\x2g \x3\x2\x2\x2hi\a"+
		"*\x2\x2i\"\x3\x2\x2\x2jk\a+\x2\x2k$\x3\x2\x2\x2ln\t\x3\x2\x2ml\x3\x2\x2"+
		"\x2no\x3\x2\x2\x2om\x3\x2\x2\x2op\x3\x2\x2\x2p&\x3\x2\x2\x2qu\a%\x2\x2"+
		"rt\v\x2\x2\x2sr\x3\x2\x2\x2tw\x3\x2\x2\x2uv\x3\x2\x2\x2us\x3\x2\x2\x2"+
		"vx\x3\x2\x2\x2wu\x3\x2\x2\x2xy\a\f\x2\x2yz\x3\x2\x2\x2z{\b\x14\x2\x2{"+
		"(\x3\x2\x2\x2|~\t\x4\x2\x2}|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F}\x3\x2\x2"+
		"\x2\x7F\x80\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x82\b\x15\x2\x2\x82*\x3"+
		"\x2\x2\x2\x83\x84\v\x2\x2\x2\x84,\x3\x2\x2\x2\v\x2\x34\x36;>Lou\x7F\x3"+
		"\x2\x3\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace iro4cli.Grammar
