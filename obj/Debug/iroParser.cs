//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:\VSProjects\_iro\iro4cli\Grammar\iro.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace iro4cli.Grammar {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class iroParser : Parser {
	public const int
		INCLUDE=1, REG_EQUALS_SYM=2, EQUALS_SYM=3, ARRAY_SYM=4, COMMA_SYM=5, L_SQUARE_BRACKET=6, 
		R_SQUARE_BRACKET=7, SET_OPEN=8, SET_CLOSE=9, L_BRACKET=10, R_BRACKET=11, 
		COLON_SYM=12, SEMICOLON_SYM=13, QUOTE_SYM=14, REF_SYM=15, IDENTIFIER=16, 
		COMMENT=17, WS=18, UNKNOWN_SYMBOL=19;
	public const int
		RULE_compileUnit = 0, RULE_block = 1, RULE_statement = 2, RULE_attribute = 3, 
		RULE_sys_set = 4, RULE_set = 5, RULE_include = 6, RULE_definition = 7, 
		RULE_array = 8, RULE_regex = 9, RULE_constant_ref = 10;
	public static readonly string[] ruleNames = {
		"compileUnit", "block", "statement", "attribute", "sys_set", "set", "include", 
		"definition", "array", "regex", "constant_ref"
	};

	private static readonly string[] _LiteralNames = {
		null, "'include'", "'\\='", "'='", "'[]'", "','", "'['", "']'", "'{'", 
		"'}'", "'('", "')'", "':'", "';'", "'\"'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INCLUDE", "REG_EQUALS_SYM", "EQUALS_SYM", "ARRAY_SYM", "COMMA_SYM", 
		"L_SQUARE_BRACKET", "R_SQUARE_BRACKET", "SET_OPEN", "SET_CLOSE", "L_BRACKET", 
		"R_BRACKET", "COLON_SYM", "SEMICOLON_SYM", "QUOTE_SYM", "REF_SYM", "IDENTIFIER", 
		"COMMENT", "WS", "UNKNOWN_SYMBOL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "iro.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public iroParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(iroParser.Eof, 0); }
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 22; block();
				}
				}
				State = 27;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 28; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Sys_setContext sys_set() {
			return GetRuleContext<Sys_setContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 30; statement();
				}
				break;

			case 2:
				{
				State = 31; sys_set();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 34; attribute();
				}
				break;

			case 2:
				{
				State = 35; set();
				}
				break;

			case 3:
				{
				State = 36; include();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public DefinitionContext definition() {
			return GetRuleContext<DefinitionContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; Match(IDENTIFIER);
			State = 40; definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sys_setContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Sys_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sys_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterSys_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitSys_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSys_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sys_setContext sys_set() {
		Sys_setContext _localctx = new Sys_setContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_sys_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(IDENTIFIER);
			State = 44;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 43; Match(ARRAY_SYM);
				}
			}

			State = 46; Match(SET_OPEN);
			State = 50;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 47; statement();
				}
				}
				State = 52;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 53; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public ITerminalNode COLON_SYM() { return GetToken(iroParser.COLON_SYM, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(iroParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(iroParser.IDENTIFIER, i);
		}
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IDENTIFIER) {
				{
				State = 55; Match(IDENTIFIER);
				}
			}

			State = 59;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 58; Match(ARRAY_SYM);
				}
			}

			State = 61; Match(COLON_SYM);
			State = 62; Match(IDENTIFIER);
			State = 63; Match(SET_OPEN);
			State = 67;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ARRAY_SYM) | (1L << COLON_SYM) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 64; statement();
				}
				}
				State = 69;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 70; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public ITerminalNode COLON_SYM() { return GetToken(iroParser.COLON_SYM, 0); }
		public ITerminalNode INCLUDE() { return GetToken(iroParser.INCLUDE, 0); }
		public ITerminalNode[] QUOTE_SYM() { return GetTokens(iroParser.QUOTE_SYM); }
		public ITerminalNode QUOTE_SYM(int i) {
			return GetToken(iroParser.QUOTE_SYM, i);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(COLON_SYM);
			State = 73; Match(INCLUDE);
			State = 74; Match(QUOTE_SYM);
			State = 75; Match(IDENTIFIER);
			State = 76; Match(QUOTE_SYM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		public ITerminalNode EQUALS_SYM() { return GetToken(iroParser.EQUALS_SYM, 0); }
		public ITerminalNode REG_EQUALS_SYM() { return GetToken(iroParser.REG_EQUALS_SYM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public RegexContext regex() {
			return GetRuleContext<RegexContext>(0);
		}
		public Constant_refContext constant_ref() {
			return GetRuleContext<Constant_refContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ITerminalNode ARRAY_SYM() { return GetToken(iroParser.ARRAY_SYM, 0); }
		public ITerminalNode SEMICOLON_SYM() { return GetToken(iroParser.SEMICOLON_SYM, 0); }
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ARRAY_SYM) {
				{
				State = 78; Match(ARRAY_SYM);
				}
			}

			State = 81;
			_la = _input.La(1);
			if ( !(_la==REG_EQUALS_SYM || _la==EQUALS_SYM) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 86;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				{
				State = 82; Match(IDENTIFIER);
				}
				break;

			case 2:
				{
				State = 83; regex();
				}
				break;

			case 3:
				{
				State = 84; constant_ref();
				}
				break;

			case 4:
				{
				State = 85; array();
				}
				break;
			}
			State = 89;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SEMICOLON_SYM) {
				{
				State = 88; Match(SEMICOLON_SYM);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(iroParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(iroParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA_SYM() { return GetTokens(iroParser.COMMA_SYM); }
		public ITerminalNode COMMA_SYM(int i) {
			return GetToken(iroParser.COMMA_SYM, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitArray(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_array);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 91; Match(IDENTIFIER);
					State = 92; Match(COMMA_SYM);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 95;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 97; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexContext : ParserRuleContext {
		public ITerminalNode L_BRACKET() { return GetToken(iroParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(iroParser.R_BRACKET, 0); }
		public RegexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regex; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterRegex(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitRegex(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexContext regex() {
		RegexContext _localctx = new RegexContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_regex);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(L_BRACKET);
			State = 103;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 100;
					MatchWildcard();
					}
					} 
				}
				State = 105;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			State = 106; Match(R_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_refContext : ParserRuleContext {
		public ITerminalNode[] REF_SYM() { return GetTokens(iroParser.REF_SYM); }
		public ITerminalNode REF_SYM(int i) {
			return GetToken(iroParser.REF_SYM, i);
		}
		public ITerminalNode SET_OPEN() { return GetToken(iroParser.SET_OPEN, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(iroParser.IDENTIFIER, 0); }
		public ITerminalNode SET_CLOSE() { return GetToken(iroParser.SET_CLOSE, 0); }
		public Constant_refContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_ref; } }
		public override void EnterRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.EnterConstant_ref(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IiroListener typedListener = listener as IiroListener;
			if (typedListener != null) typedListener.ExitConstant_ref(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IiroVisitor<TResult> typedVisitor = visitor as IiroVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_ref(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_refContext constant_ref() {
		Constant_refContext _localctx = new Constant_refContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_constant_ref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; Match(REF_SYM);
			State = 109; Match(REF_SYM);
			State = 110; Match(SET_OPEN);
			State = 111; Match(IDENTIFIER);
			State = 112; Match(SET_CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x15u\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\a\x2\x1A\n\x2\f\x2\xE\x2\x1D\v\x2"+
		"\x3\x2\x3\x2\x3\x3\x3\x3\x5\x3#\n\x3\x3\x4\x3\x4\x3\x4\x5\x4(\n\x4\x3"+
		"\x5\x3\x5\x3\x5\x3\x6\x3\x6\x5\x6/\n\x6\x3\x6\x3\x6\a\x6\x33\n\x6\f\x6"+
		"\xE\x6\x36\v\x6\x3\x6\x3\x6\x3\a\x5\a;\n\a\x3\a\x5\a>\n\a\x3\a\x3\a\x3"+
		"\a\x3\a\a\a\x44\n\a\f\a\xE\aG\v\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\t\x5\tR\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x5\tY\n\t\x3\t\x5\t\\\n\t\x3"+
		"\n\x3\n\x6\n`\n\n\r\n\xE\n\x61\x3\n\x3\n\x3\v\x3\v\a\vh\n\v\f\v\xE\vk"+
		"\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3i\x2\x2\r\x2\x2\x4"+
		"\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x2\x3\x3\x2"+
		"\x4\x5y\x2\x1B\x3\x2\x2\x2\x4\"\x3\x2\x2\x2\x6\'\x3\x2\x2\x2\b)\x3\x2"+
		"\x2\x2\n,\x3\x2\x2\x2\f:\x3\x2\x2\x2\xEJ\x3\x2\x2\x2\x10Q\x3\x2\x2\x2"+
		"\x12_\x3\x2\x2\x2\x14\x65\x3\x2\x2\x2\x16n\x3\x2\x2\x2\x18\x1A\x5\x4\x3"+
		"\x2\x19\x18\x3\x2\x2\x2\x1A\x1D\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1B\x1C"+
		"\x3\x2\x2\x2\x1C\x1E\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1E\x1F\a\x2\x2\x3"+
		"\x1F\x3\x3\x2\x2\x2 #\x5\x6\x4\x2!#\x5\n\x6\x2\" \x3\x2\x2\x2\"!\x3\x2"+
		"\x2\x2#\x5\x3\x2\x2\x2$(\x5\b\x5\x2%(\x5\f\a\x2&(\x5\xE\b\x2\'$\x3\x2"+
		"\x2\x2\'%\x3\x2\x2\x2\'&\x3\x2\x2\x2(\a\x3\x2\x2\x2)*\a\x12\x2\x2*+\x5"+
		"\x10\t\x2+\t\x3\x2\x2\x2,.\a\x12\x2\x2-/\a\x6\x2\x2.-\x3\x2\x2\x2./\x3"+
		"\x2\x2\x2/\x30\x3\x2\x2\x2\x30\x34\a\n\x2\x2\x31\x33\x5\x6\x4\x2\x32\x31"+
		"\x3\x2\x2\x2\x33\x36\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2"+
		"\x2\x35\x37\x3\x2\x2\x2\x36\x34\x3\x2\x2\x2\x37\x38\a\v\x2\x2\x38\v\x3"+
		"\x2\x2\x2\x39;\a\x12\x2\x2:\x39\x3\x2\x2\x2:;\x3\x2\x2\x2;=\x3\x2\x2\x2"+
		"<>\a\x6\x2\x2=<\x3\x2\x2\x2=>\x3\x2\x2\x2>?\x3\x2\x2\x2?@\a\xE\x2\x2@"+
		"\x41\a\x12\x2\x2\x41\x45\a\n\x2\x2\x42\x44\x5\x6\x4\x2\x43\x42\x3\x2\x2"+
		"\x2\x44G\x3\x2\x2\x2\x45\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2\x2\x46H\x3\x2"+
		"\x2\x2G\x45\x3\x2\x2\x2HI\a\v\x2\x2I\r\x3\x2\x2\x2JK\a\xE\x2\x2KL\a\x3"+
		"\x2\x2LM\a\x10\x2\x2MN\a\x12\x2\x2NO\a\x10\x2\x2O\xF\x3\x2\x2\x2PR\a\x6"+
		"\x2\x2QP\x3\x2\x2\x2QR\x3\x2\x2\x2RS\x3\x2\x2\x2SX\t\x2\x2\x2TY\a\x12"+
		"\x2\x2UY\x5\x14\v\x2VY\x5\x16\f\x2WY\x5\x12\n\x2XT\x3\x2\x2\x2XU\x3\x2"+
		"\x2\x2XV\x3\x2\x2\x2XW\x3\x2\x2\x2Y[\x3\x2\x2\x2Z\\\a\xF\x2\x2[Z\x3\x2"+
		"\x2\x2[\\\x3\x2\x2\x2\\\x11\x3\x2\x2\x2]^\a\x12\x2\x2^`\a\a\x2\x2_]\x3"+
		"\x2\x2\x2`\x61\x3\x2\x2\x2\x61_\x3\x2\x2\x2\x61\x62\x3\x2\x2\x2\x62\x63"+
		"\x3\x2\x2\x2\x63\x64\a\x12\x2\x2\x64\x13\x3\x2\x2\x2\x65i\a\f\x2\x2\x66"+
		"h\v\x2\x2\x2g\x66\x3\x2\x2\x2hk\x3\x2\x2\x2ij\x3\x2\x2\x2ig\x3\x2\x2\x2"+
		"jl\x3\x2\x2\x2ki\x3\x2\x2\x2lm\a\r\x2\x2m\x15\x3\x2\x2\x2no\a\x11\x2\x2"+
		"op\a\x11\x2\x2pq\a\n\x2\x2qr\a\x12\x2\x2rs\a\v\x2\x2s\x17\x3\x2\x2\x2"+
		"\xF\x1B\"\'.\x34:=\x45QX[\x61i";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace iro4cli.Grammar
