//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace iro4cli.Templates {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class AtomResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal AtomResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("iro4cli.Templates.AtomResources", typeof(AtomResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;use babel&apos;;
        ///
        ///import Atom from &apos;../lib/atom&apos;;
        ///
        ///// Use the command `window:run-package-specs` (cmd-alt-ctrl-p) to run specs.
        /////
        ///// To run a specific `it` or `describe` block add an `f` to the front (e.g. `fit`
        ///// or `fdescribe`). Remove the `f` to unfocus the block.
        ///
        ///describe(&apos;Atom&apos;, () =&gt; {
        ///  let workspaceElement, activationPromise;
        ///
        ///  beforeEach(() =&gt; {
        ///    workspaceElement = atom.views.getView(atom.workspace);
        ///    activationPromise = atom.packages.activatePackage(&apos;atom&apos;);
        ///  });
        ///
        ///  describe(&apos;when the atom: [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string atom_spec {
            get {
                return ResourceManager.GetString("atom_spec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;use babel&apos;;
        ///
        ///import AtomView from &apos;../lib/atom-view&apos;;
        ///
        ///describe(&apos;AtomView&apos;, () =&gt; {
        ///  it(&apos;has one valid test&apos;, () =&gt; {
        ///    expect(&apos;life&apos;).toBe(&apos;easy&apos;);
        ///  });
        ///});.
        /// </summary>
        internal static string atom_view_spec {
            get {
                return ResourceManager.GetString("atom_view_spec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ## 0.1.0 - First Release
        ///* Every feature added
        ///* Every bug fixed.
        /// </summary>
        internal static string CHANGELOG {
            get {
                return ResourceManager.GetString("CHANGELOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .DS_Store
        ///npm-debug.log
        ///node_modules.
        /// </summary>
        internal static string gitignore {
            get {
                return ResourceManager.GetString("gitignore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copyright (c) 2020 {extension_name}
        ///
        ///Permission is hereby granted, free of charge, to any person obtaining
        ///a copy of this software and associated documentation files (the
        ///&quot;Software&quot;), to deal in the Software without restriction, including
        ///without limitation the rights to use, copy, modify, merge, publish,
        ///distribute, sublicense, and/or sell copies of the Software, and to
        ///permit persons to whom the Software is furnished to do so, subject to
        ///the following conditions:
        ///
        ///The above copyright notice and  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LICENSE {
            get {
                return ResourceManager.GetString("LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {
        ///  &quot;name&quot;: &quot;{extension_name}&quot;,
        ///  &quot;main&quot;: &quot;./lib/atom&quot;,
        ///  &quot;version&quot;: &quot;0.0.0&quot;,
        ///  &quot;description&quot;: &quot;A short description of your package&quot;,
        ///  &quot;keywords&quot;: [
        ///  ],
        ///  &quot;repository&quot;: &quot;your_repo_here&quot;,
        ///  &quot;license&quot;: &quot;MIT&quot;,
        ///  &quot;engines&quot;: {
        ///    &quot;atom&quot;: &quot;&gt;=1.0.0 &lt;2.0.0&quot;
        ///  },
        ///  &quot;dependencies&quot;: {
        ///  }
        ///}.
        /// </summary>
        internal static string package {
            get {
                return ResourceManager.GetString("package", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to # {extension_name} package
        ///
        ///A short description of your package.
        ///
        ///![A screenshot of your package](https://f.cloud.github.com/assets/69169/2290250/c35d867a-a017-11e3-86be-cd7c5bf3ff9b.gif).
        /// </summary>
        internal static string README {
            get {
                return ResourceManager.GetString("README", resourceCulture);
            }
        }
    }
}
